//
// Prefix header for all source files of the 'EonilCocoaComplements-SQLite' target in the 'EonilCocoaComplements-SQLite' project
//

#ifdef __OBJC__
#import <Foundation/Foundation.h>
#endif





/*!
 This macro determines `NSInteger` and `NSUInteger` limits are same with `int` and `unsigned int`.
 This doesn't mean they have same size, but it's enough with limit checks.
 
 In the case of equal limits, we can treat them have same range. So we can avoid overflow/underflow error check on assignment.
 */

#define					EESQLiteOptimizeForSystemHaveEqualSizedIntAndNSInteger		((INT_MAX == NSIntegerMax) && (UINT_MAX == NSUIntegerMax))




/*!
 Returns test result. `NO` if there's an error. `YES` for no error.
 */
inline
static
BOOL
EESQLiteCheckForNoError(NSError* errorToTest, NSError** error)
{
	BOOL	ok	=	errorToTest == nil;
	
	if (!ok && error != NULL)
	{
		*error	=	errorToTest;
	}
	return	ok;
}

/*!
 Returns test result. `YES` if there's an error. `NO` for no error.
inline
static
BOOL
EESQLiteCheckErrorExistenceAndSetToArgumentVariableInverted(NSError* actualErrorValue, NSError** errorArgument)	
{
	return	!EESQLiteCheckTheErrorIsNilAndSetToArgumentIfItIsExist(actualErrorValue, errorArgument);
 }
 */