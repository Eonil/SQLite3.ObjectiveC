DESIGN
======

//
//
//
//
//Model
//-----
//Data layer classes are categorized into two categories.
//
//-	Live editable *sources*
//	-	Mutable + undo/redo support
//-	Baked immutable *resources*
//
//This is because of efficiency. Live editable node cannot be shared over multiple nodes.
//






Undo/Redo
---------
Undo/redo is implemented by taking snapshot of each checkpoint.
Snapshot will become expensive as graph grows. So it needs some optimization.

For more information, see the `STSnapshot` class.





Undo/Redo Optimization by Immutble Graph Shadowing
--------------------------------------------------
Optimization always needs some premises.

**Premises**

1.	Graph is tree. No back-link.
2.	Some part of graph is always mutable.
3.	If graph node is not changed, it should not be actually copied.
4.	Snapshot will be stored as immutable object.

With the premises I could make this procedure which I call *Immutable Graph Shadowing*.

1.	Each mutable node can cache its immutable copy internally.
2.	Create, cache and use internal immutable copy when requested.
3.	Purge the internal immutable copy if any internal state has been changed.
	Any immutable copy request will cause creation of recent state copy.

If the graph is fully mutable, snapshot needs full copy of the graph every time.
With this optimization, graph can re-use any unchanged part of the graph very efficiently.

**NOTE**

This optimization is not yet implemented.






Referential Transparency
------------------------
To make graph safe against undo/redo, graph never rely on pointer reference. Because objects 
referenced by a pointer won't be updated to a new version of the object. Ultimately whole graph
is treated as graph of *values*, so identifying each node by pointer doesn't make sense.

Instead, graph must reference a node with unique key. Which is unique over whole state sequence.
The unique key can be re-used if no node in whole state sequence is using the key.





